Index: Assets/Scripts/Units Selection/DragUnitSelect.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using System;\r\nusing System.Collections;\r\nusing System.Collections.Generic;\r\nusing Unity.Burst;\r\nusing Unity.Collections;\r\nusing Unity.Jobs;\r\nusing Unity.Mathematics;\r\nusing Unity.VisualScripting;\r\nusing UnityEngine;\r\nusing UnityEngine.Serialization;\r\n\r\npublic class DragUnitSelect : MonoBehaviour\r\n{\r\n    [FormerlySerializedAs(\"_camera\")] [SerializeField] private Camera camera;\r\n    [FormerlySerializedAs(\"_canvas\")] [SerializeField] private Canvas canvas;\r\n\r\n    [FormerlySerializedAs(\"_boxVisual\")] [SerializeField] private RectTransform boxVisual;\r\n\r\n    Rect _selectionBox;\r\n\r\n    Vector2 _startPosition;\r\n    Vector2 _endPosition;\r\n\r\n    private void Start()\r\n    {\r\n        _startPosition = Vector2.zero; \r\n        _endPosition = Vector2.zero;\r\n        DrawVisual();\r\n    }\r\n    void Update()\r\n    {\r\n        if(Input.GetMouseButtonDown(0))\r\n        {\r\n            _startPosition = Input.mousePosition;\r\n            _selectionBox = new Rect();\r\n        }\r\n\r\n        if (Input.GetMouseButton(0))\r\n        {\r\n            _endPosition = Input.mousePosition;\r\n            DrawVisual();\r\n            DrawSelection();\r\n        }\r\n\r\n        if(Input.GetMouseButtonUp(0))\r\n        {\r\n            SelectUnits();\r\n            _startPosition = Vector2.zero;\r\n            _endPosition = Vector2.zero;\r\n            DrawVisual();\r\n        }\r\n    }\r\n\r\n    private void DrawVisual()\r\n    {\r\n        Vector2 boxStart = _startPosition;\r\n        Vector2 boxEnd = _endPosition;\r\n\r\n        Vector2 boxCenter = (boxStart + boxEnd) / 2;\r\n        boxVisual.position = boxCenter;\r\n\r\n        Vector2 boxSize = new Vector2(Mathf.Abs(boxStart.x - boxEnd.x), Mathf.Abs(boxStart.y - boxEnd.y));\r\n\r\n        boxVisual.sizeDelta = boxSize;\r\n    }\r\n\r\n    private void DrawSelection()\r\n    {\r\n        if(Input.mousePosition.x < _startPosition.x)\r\n        {\r\n            _selectionBox.xMin = Input.mousePosition.x;\r\n            _selectionBox.xMax = _startPosition.x;\r\n        }\r\n        else\r\n        {\r\n            _selectionBox.xMin = _startPosition.x;\r\n            _selectionBox.xMax = Input.mousePosition.x;\r\n        }\r\n\r\n        if (Input.mousePosition.y < _startPosition.y)\r\n        {\r\n            _selectionBox.yMin = Input.mousePosition.y;\r\n            _selectionBox.yMax = _startPosition.y;\r\n        }\r\n        else\r\n        {\r\n            _selectionBox.yMin = _startPosition.y;\r\n            _selectionBox.yMax = Input.mousePosition.y;\r\n        }\r\n    }\r\n    private void SelectUnits()\r\n    {\r\n        List<Unit> unitList = new List<Unit>();\r\n        foreach (var item in UnitSelections.Instance.unitlist)\r\n        {\r\n            if (_selectionBox.Contains(camera.WorldToScreenPoint(item.transform.position)))\r\n            {\r\n                unitList.Add(item);\r\n            }\r\n        }\r\n        UnitSelections.Instance.DragSelect(unitList);\r\n    }\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Assets/Scripts/Units Selection/DragUnitSelect.cs b/Assets/Scripts/Units Selection/DragUnitSelect.cs
--- a/Assets/Scripts/Units Selection/DragUnitSelect.cs	(revision ab738df56da18496c823a60dfc12d33bb6733964)
+++ b/Assets/Scripts/Units Selection/DragUnitSelect.cs	(date 1691980384162)
@@ -1,104 +1,100 @@
-using System;
-using System.Collections;
-using System.Collections.Generic;
-using Unity.Burst;
-using Unity.Collections;
-using Unity.Jobs;
-using Unity.Mathematics;
-using Unity.VisualScripting;
 using UnityEngine;
-using UnityEngine.Serialization;
+using System.Collections.Generic;
 
-public class DragUnitSelect : MonoBehaviour
-{
-    [FormerlySerializedAs("_camera")] [SerializeField] private Camera camera;
-    [FormerlySerializedAs("_canvas")] [SerializeField] private Canvas canvas;
+namespace Units_Selection
+{
+    public class DragUnitSelect : MonoBehaviour
+    {
+        [SerializeField] private new Camera camera;
 
-    [FormerlySerializedAs("_boxVisual")] [SerializeField] private RectTransform boxVisual;
+        [SerializeField] private RectTransform boxVisual;
 
-    Rect _selectionBox;
+        private Rect _selectionBox;
 
-    Vector2 _startPosition;
-    Vector2 _endPosition;
+        private Vector2 _startPosition;
+        private Vector2 _endPosition;
 
-    private void Start()
-    {
-        _startPosition = Vector2.zero; 
-        _endPosition = Vector2.zero;
-        DrawVisual();
-    }
-    void Update()
-    {
-        if(Input.GetMouseButtonDown(0))
-        {
-            _startPosition = Input.mousePosition;
-            _selectionBox = new Rect();
-        }
+        private void Start()
+        {
+            _startPosition = Vector2.zero; 
+            _endPosition = Vector2.zero;
+            DrawVisual();
+        }
+
+        private void Update()
+        {
+            if(Input.GetMouseButtonDown(0))
+            {
+                _startPosition = Input.mousePosition;
+                _selectionBox = new Rect();
+            }
 
-        if (Input.GetMouseButton(0))
-        {
-            _endPosition = Input.mousePosition;
-            DrawVisual();
-            DrawSelection();
-        }
+            if (Input.GetMouseButton(0))
+            {
+                _endPosition = Input.mousePosition;
+                DrawVisual();
+                DrawSelection();
+            }
 
-        if(Input.GetMouseButtonUp(0))
-        {
-            SelectUnits();
-            _startPosition = Vector2.zero;
-            _endPosition = Vector2.zero;
-            DrawVisual();
-        }
-    }
+            if(Input.GetMouseButtonUp(0))
+            {
+                SelectUnits();
+                _startPosition = Vector2.zero;
+                _endPosition = Vector2.zero;
+                DrawVisual();
+            }
+        }
 
-    private void DrawVisual()
-    {
-        Vector2 boxStart = _startPosition;
-        Vector2 boxEnd = _endPosition;
+        private void DrawVisual()
+        {
+            var boxStart = _startPosition;
+            var boxEnd = _endPosition;
 
-        Vector2 boxCenter = (boxStart + boxEnd) / 2;
-        boxVisual.position = boxCenter;
+            var boxCenter = (boxStart + boxEnd) / 2;
+            boxVisual.position = boxCenter;
 
-        Vector2 boxSize = new Vector2(Mathf.Abs(boxStart.x - boxEnd.x), Mathf.Abs(boxStart.y - boxEnd.y));
+            var boxSize = new Vector2(Mathf.Abs(boxStart.x - boxEnd.x), Mathf.Abs(boxStart.y - boxEnd.y));
 
-        boxVisual.sizeDelta = boxSize;
-    }
+            boxVisual.sizeDelta = boxSize;
+        }
 
-    private void DrawSelection()
-    {
-        if(Input.mousePosition.x < _startPosition.x)
-        {
-            _selectionBox.xMin = Input.mousePosition.x;
-            _selectionBox.xMax = _startPosition.x;
-        }
-        else
-        {
-            _selectionBox.xMin = _startPosition.x;
-            _selectionBox.xMax = Input.mousePosition.x;
-        }
+        private void DrawSelection()
+        {
+            if(Input.mousePosition.x < _startPosition.x)
+            {
+                _selectionBox.xMin = Input.mousePosition.x;
+                _selectionBox.xMax = _startPosition.x;
+            }
+            else
+            {
+                _selectionBox.xMin = _startPosition.x;
+                _selectionBox.xMax = Input.mousePosition.x;
+            }
 
-        if (Input.mousePosition.y < _startPosition.y)
-        {
-            _selectionBox.yMin = Input.mousePosition.y;
-            _selectionBox.yMax = _startPosition.y;
-        }
-        else
-        {
-            _selectionBox.yMin = _startPosition.y;
-            _selectionBox.yMax = Input.mousePosition.y;
-        }
-    }
-    private void SelectUnits()
-    {
-        List<Unit> unitList = new List<Unit>();
-        foreach (var item in UnitSelections.Instance.unitlist)
-        {
-            if (_selectionBox.Contains(camera.WorldToScreenPoint(item.transform.position)))
-            {
-                unitList.Add(item);
-            }
-        }
-        UnitSelections.Instance.DragSelect(unitList);
+            if (Input.mousePosition.y < _startPosition.y)
+            {
+                _selectionBox.yMin = Input.mousePosition.y;
+                _selectionBox.yMax = _startPosition.y;
+            }
+            else
+            {
+                _selectionBox.yMin = _startPosition.y;
+                _selectionBox.yMax = Input.mousePosition.y;
+            }
+        }
+        private void SelectUnits()
+        {
+            //Refactor this...
+            var unitList = new List<Unit>();
+            foreach (var item in UnitSelections.Instance.unitList)
+            {
+                if (_selectionBox.Contains(camera.WorldToScreenPoint(item.transform.position)))
+                {
+                    unitList.Add(item);
+                }
+            }
+            UnitSelections.Instance.DragSelect(unitList);
+        }
     }
 }
 
Index: Assets/Scripts/Units Selection/UnitClick.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using System.Collections;\r\nusing System.Collections.Generic;\r\nusing UnityEngine;\r\nusing UnityEngine.Serialization;\r\n\r\npublic class UnitClick : MonoBehaviour\r\n{\r\n    [FormerlySerializedAs(\"_camera\")] [SerializeField] private Camera camera;\r\n\r\n    [FormerlySerializedAs(\"_clickable\")] [SerializeField] private LayerMask clickable;\r\n\r\n    void Update()\r\n    {\r\n        if (Input.GetMouseButtonDown(0))\r\n        {\r\n\r\n            Ray ray = camera.ScreenPointToRay(Input.mousePosition);\r\n\r\n            if (Physics.Raycast(ray, out RaycastHit hit, Mathf.Infinity, clickable))\r\n            {\r\n\r\n                if (Input.GetKey(KeyCode.LeftShift))\r\n                {\r\n                    UnitSelections.Instance.ShiftClickSelect(hit.collider.GetComponent<Unit>());\r\n                }\r\n                else\r\n                {\r\n                    UnitSelections.Instance.ClickSelect(hit.collider.GetComponent<Unit>());\r\n                }\r\n\r\n            }\r\n            else\r\n            {\r\n                if (!Input.GetKey(KeyCode.LeftShift))\r\n                {\r\n                    UnitSelections.Instance.DeselectAll();\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Assets/Scripts/Units Selection/UnitClick.cs b/Assets/Scripts/Units Selection/UnitClick.cs
--- a/Assets/Scripts/Units Selection/UnitClick.cs	(revision ab738df56da18496c823a60dfc12d33bb6733964)
+++ b/Assets/Scripts/Units Selection/UnitClick.cs	(date 1691980219196)
@@ -1,39 +1,37 @@
-using System.Collections;
-using System.Collections.Generic;
 using UnityEngine;
-using UnityEngine.Serialization;
 
-public class UnitClick : MonoBehaviour
-{
-    [FormerlySerializedAs("_camera")] [SerializeField] private Camera camera;
+namespace Units_Selection
+{
+    public class UnitClick : MonoBehaviour
+    {
+        [SerializeField] private new Camera camera;
+        [SerializeField] private LayerMask clickable;
 
-    [FormerlySerializedAs("_clickable")] [SerializeField] private LayerMask clickable;
-
-    void Update()
-    {
-        if (Input.GetMouseButtonDown(0))
-        {
+        public void Update()
+        {
+            if (Input.GetMouseButtonDown(0))
+            {
+                var ray = camera.ScreenPointToRay(Input.mousePosition);
 
-            Ray ray = camera.ScreenPointToRay(Input.mousePosition);
-
-            if (Physics.Raycast(ray, out RaycastHit hit, Mathf.Infinity, clickable))
-            {
+                if (Physics.Raycast(ray, out var ratHit, Mathf.Infinity, clickable))
+                {
 
-                if (Input.GetKey(KeyCode.LeftShift))
-                {
-                    UnitSelections.Instance.ShiftClickSelect(hit.collider.GetComponent<Unit>());
-                }
-                else
-                {
-                    UnitSelections.Instance.ClickSelect(hit.collider.GetComponent<Unit>());
-                }
+                    if (Input.GetKey(KeyCode.LeftShift))
+                    {
+                        UnitSelections.Instance.ShiftClickSelect(ratHit.collider.GetComponent<Unit>());
+                    }
+                    else
+                    {
+                        UnitSelections.Instance.ClickSelect(ratHit.collider.GetComponent<Unit>());
+                    }
 
-            }
-            else
-            {
-                if (!Input.GetKey(KeyCode.LeftShift))
-                {
-                    UnitSelections.Instance.DeselectAll();
+                }
+                else
+                {
+                    if (!Input.GetKey(KeyCode.LeftShift))
+                    {
+                        UnitSelections.Instance.DeselectAll();
+                    }
                 }
             }
         }
Index: Assets/Scripts/Building.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using UnityEngine;\r\n// ReSharper disable PossibleLossOfFraction\r\n\r\n[RequireComponent(typeof(Rigidbody), typeof(BoxCollider))]\r\npublic class Building : MonoBehaviour\r\n{\r\n    [SerializeField] private GameObject cubePrefab;\r\n    [SerializeField] private LayerMask ignoreLayer;\r\n    [SerializeField] private bool isAvailable = true;\r\n    [SerializeField] private Vector2Int size = Vector2Int.one;\r\n    [SerializeField] private BoxCollider objectCollider;\r\n    public bool IsAvailable => isAvailable;\r\n    public Vector2Int Size => size;\r\n\r\n    private bool _isOnLand = true;\r\n    private bool _isTriggered;\r\n    private GameObject _cubeObj;\r\n    private Renderer[] _renderers;\r\n    private const string ID = \"_ID\";\r\n\r\n    private const float RAYCAST_DISTANCE = 0.5f;\r\n\r\n\r\n    private void Start()\r\n    {\r\n        SetID((byte)Random.Range(0, 255));\r\n        _renderers = GetComponentsInChildren<Renderer>();\r\n    }\r\n\r\n    private void Reset()\r\n    {\r\n        objectCollider = GetComponent<BoxCollider>();\r\n    }\r\n\r\n    public void SetTransparent()\r\n    {\r\n        RecolorMaterial(isAvailable ? Color.green : Color.red);\r\n        CreateCube();\r\n    }\r\n\r\n    public void SetNormal()\r\n    {\r\n        Destroy(_cubeObj);\r\n        RecolorMaterial(Color.white);\r\n        objectCollider.isTrigger = false;\r\n    }\r\n\r\n    // ReSharper disable Unity.PerformanceAnalysis\r\n    private void CreateCube()\r\n    {\r\n        for (var x = 0; x < Size.x; x++)\r\n        {\r\n            for (var y = 0; y < Size.y; y++)\r\n            {\r\n                if (_cubeObj == null)\r\n                {\r\n                    var transform1 = transform;\r\n                    var cubePosition = transform1.position + new Vector3(x, 0, y);\r\n                    _cubeObj = Instantiate(cubePrefab, cubePosition, Quaternion.identity, transform1);\r\n                }\r\n\r\n                _cubeObj.GetComponent<Renderer>().material.color = IsAvailable ? new Color(0, 255, 0, 0.6f) : new Color(255, 0, 0, 0.6f);\r\n                _cubeObj.transform.localScale = new Vector3(Size.x, 0.05f, Size.y);\r\n                _cubeObj.transform.position = transform.position + new Vector3(x / 2, 0, y / 2);\r\n            }\r\n        }\r\n\r\n        CheckIfOnLand();\r\n\r\n        isAvailable = _isOnLand && !_isTriggered;\r\n    }\r\n\r\n    private void CheckIfOnLand()\r\n    {\r\n        var cornerPosition = _cubeObj.transform.position - new Vector3(Size.x / 2f, 0, Size.y / 2f) + new Vector3(0, 0.2f, 0);\r\n\r\n        Ray rayTopLeft = new(cornerPosition + new Vector3(0, 0, 0), Vector3.down * RAYCAST_DISTANCE);\r\n        Ray rayTopRight = new(cornerPosition + new Vector3(Size.x, 0, 0), Vector3.down * RAYCAST_DISTANCE);\r\n        Ray rayBottomLeft = new(cornerPosition + new Vector3(0, 0, Size.y), Vector3.down * RAYCAST_DISTANCE);\r\n        Ray rayBottomRight = new(cornerPosition + new Vector3(Size.x, 0, Size.y), Vector3.down * RAYCAST_DISTANCE);\r\n\r\n        _isOnLand = true;\r\n\r\n        if (!Physics.Raycast(rayTopLeft, RAYCAST_DISTANCE, ~ignoreLayer) ||\r\n            !Physics.Raycast(rayTopRight, RAYCAST_DISTANCE, ~ignoreLayer) ||\r\n            !Physics.Raycast(rayBottomLeft, RAYCAST_DISTANCE, ~ignoreLayer) ||\r\n            !Physics.Raycast(rayBottomRight, RAYCAST_DISTANCE, ~ignoreLayer))\r\n        {\r\n            _isOnLand = false;\r\n        }\r\n    }\r\n\r\n    private void RecolorMaterial(Color color)\r\n    {\r\n        foreach (var item in _renderers)\r\n        {\r\n            item.material.color = color;\r\n        }\r\n    }\r\n\r\n    //Done so pixel shader will set different id for buildings so their outlines will work properly\r\n    private void SetID(byte id)\r\n    {\r\n        var renderers = GetComponentsInChildren<Renderer>();\r\n        foreach (var item in renderers)\r\n        {\r\n            // ReSharper disable once Unity.PreferAddressByIdToGraphicsParams\r\n            item.material.SetFloat(ID, id);\r\n        }\r\n    }\r\n\r\n    private void OnTriggerStay(Collider other)\r\n    {\r\n        if (other != null && other != objectCollider)\r\n        {\r\n            _isTriggered = true;\r\n        }\r\n    }\r\n\r\n    private void OnTriggerExit(Collider other)\r\n    {\r\n        if (other != null && other != objectCollider)\r\n        {\r\n            _isTriggered = false;\r\n        }\r\n    }\r\n\r\n#if UNITY_EDITOR\r\n    private void OnDrawGizmos()\r\n    {\r\n        if (_cubeObj == null) return;\r\n        var cornerPosition = _cubeObj.transform.position - new Vector3(size.x / 2f, 0, size.y / 2f) + new Vector3(0, 0.2f, 0);\r\n\r\n        Gizmos.DrawRay(cornerPosition + new Vector3(0, 0, 0), Vector3.down * RAYCAST_DISTANCE);\r\n        Gizmos.DrawRay(cornerPosition + new Vector3(size.x, 0, 0), Vector3.down * RAYCAST_DISTANCE);\r\n        Gizmos.DrawRay(cornerPosition + new Vector3(0, 0, size.y), Vector3.down * RAYCAST_DISTANCE);\r\n        Gizmos.DrawRay(cornerPosition + new Vector3(size.x, 0, size.y), Vector3.down * RAYCAST_DISTANCE);\r\n    }\r\n#endif\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Assets/Scripts/Building.cs b/Assets/Scripts/Building.cs
--- a/Assets/Scripts/Building.cs	(revision ab738df56da18496c823a60dfc12d33bb6733964)
+++ b/Assets/Scripts/Building.cs	(date 1691979193355)
@@ -20,7 +20,6 @@
 
     private const float RAYCAST_DISTANCE = 0.5f;
 
-
     private void Start()
     {
         SetID((byte)Random.Range(0, 255));
Index: Assets/Scripts/Units Selection/Unit.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\r\nusing UnityEngine;\r\nusing UnityEngine.AI;\r\nusing UnityEngine.Serialization;\r\n\r\npublic class Unit : MonoBehaviour\r\n{\r\n    private NavMeshAgent _agent;\r\n    [FormerlySerializedAs(\"IsSelected\")] public bool isSelected;\r\n    void Start()\r\n    {\r\n        UnitSelections.Instance.unitlist.Add(this);\r\n        _agent = GetComponent<NavMeshAgent>();\r\n    }\r\n\r\n    void OnDestroy()\r\n    {\r\n        UnitSelections.Instance.unitlist.Remove(this);\r\n    }\r\n\r\n    private void Update()\r\n    {\r\n        if (Input.GetMouseButtonDown(1) && isSelected) // Left mouse button clicked\r\n        {\r\n            Ray ray = Camera.main.ScreenPointToRay(Input.mousePosition);\r\n            RaycastHit hit;\r\n\r\n            if (Physics.Raycast(ray, out hit))\r\n            {\r\n                MoveToDestination(hit.point);\r\n            }\r\n        }\r\n    }\r\n\r\n    private void MoveToDestination(Vector3 destination)\r\n    {\r\n        _agent.SetDestination(destination);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Assets/Scripts/Units Selection/Unit.cs b/Assets/Scripts/Units Selection/Unit.cs
--- a/Assets/Scripts/Units Selection/Unit.cs	(revision ab738df56da18496c823a60dfc12d33bb6733964)
+++ b/Assets/Scripts/Units Selection/Unit.cs	(date 1691980384159)
@@ -1,39 +1,42 @@
-
 using UnityEngine;
 using UnityEngine.AI;
-using UnityEngine.Serialization;
 
-public class Unit : MonoBehaviour
-{
-    private NavMeshAgent _agent;
-    [FormerlySerializedAs("IsSelected")] public bool isSelected;
-    void Start()
-    {
-        UnitSelections.Instance.unitlist.Add(this);
-        _agent = GetComponent<NavMeshAgent>();
-    }
+namespace Units_Selection
+{
+    public class Unit : MonoBehaviour
+    {
+        private NavMeshAgent _agent;
+        public bool isSelected;
+        private Camera _camera;
+
+        public void Start()
+        {
+            _camera = Camera.main;
+            UnitSelections.Instance.unitList.Add(this);
+            _agent = GetComponent<NavMeshAgent>();
+        }
 
-    void OnDestroy()
-    {
-        UnitSelections.Instance.unitlist.Remove(this);
-    }
+        void OnDestroy()
+        {
+            UnitSelections.Instance.unitList.Remove(this);
+        }
 
-    private void Update()
-    {
-        if (Input.GetMouseButtonDown(1) && isSelected) // Left mouse button clicked
-        {
-            Ray ray = Camera.main.ScreenPointToRay(Input.mousePosition);
-            RaycastHit hit;
-
-            if (Physics.Raycast(ray, out hit))
-            {
-                MoveToDestination(hit.point);
-            }
-        }
-    }
+        private void Update()
+        {
+            var ray = _camera.ScreenPointToRay(Input.mousePosition);
+            if (Input.GetMouseButtonDown(1) && isSelected) // Left mouse button clicked
+            {
+                if (Physics.Raycast(ray, out var hit))
+                {
+                    MoveToDestination(hit.point);
+                }
+            }
+        }
 
-    private void MoveToDestination(Vector3 destination)
-    {
-        _agent.SetDestination(destination);
+        private void MoveToDestination(Vector3 destination)
+        {
+            _agent.SetDestination(destination);
+        }
     }
 }
+        
\ No newline at end of file
Index: Assets/Scripts/Units Selection/UnitSelections.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using System.Collections;\r\nusing System.Collections.Generic;\r\nusing Unity.VisualScripting;\r\nusing UnityEngine;\r\n\r\npublic class UnitSelections : MonoBehaviour\r\n{\r\n    public List<Unit> unitlist = new List<Unit>();\r\n    public List<Unit> unitSelectedList = new List<Unit>();\r\n\r\n    private static UnitSelections _instance;\r\n    public static UnitSelections Instance { get { return _instance; } }\r\n\r\n    private void Awake()\r\n    {\r\n        //if an instance of this already exists and it isn’t this one\r\n        if (_instance != null && _instance != this)\r\n        {\r\n            // we destroy this instance\r\n            Destroy(this.gameObject);\r\n        }\r\n        else\r\n        {\r\n            //make this the instance\r\n            _instance = this;\r\n        }\r\n    }\r\n\r\n    public void ClickSelect(Unit unitToAdd) \r\n    {\r\n        DeselectAll();\r\n        unitSelectedList.Add(unitToAdd);\r\n        unitToAdd.isSelected = true;\r\n    }\r\n\r\n    public void ShiftClickSelect(Unit unitToAdd)\r\n    {\r\n        if(!unitSelectedList.Contains(unitToAdd))\r\n        {\r\n            unitSelectedList.Add(unitToAdd);\r\n            unitToAdd.isSelected= true;\r\n        }\r\n        else\r\n        { \r\n            unitToAdd.isSelected= false;\r\n            unitSelectedList.Remove(unitToAdd);\r\n        }\r\n    }\r\n\r\n    public void DragSelect(List<Unit> units)\r\n    {\r\n        unitSelectedList.Clear();\r\n        unitSelectedList = units;\r\n        unitSelectedList.ForEach(unit => { unit.isSelected = true; });\r\n    }\r\n\r\n    public void DeselectAll()\r\n    {\r\n        foreach (var unit in unitSelectedList)\r\n        {\r\n            unit.transform.GetChild(0).gameObject.SetActive(false);\r\n            unit.isSelected = false;\r\n        }\r\n        unitSelectedList.Clear();\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Assets/Scripts/Units Selection/UnitSelections.cs b/Assets/Scripts/Units Selection/UnitSelections.cs
--- a/Assets/Scripts/Units Selection/UnitSelections.cs	(revision ab738df56da18496c823a60dfc12d33bb6733964)
+++ b/Assets/Scripts/Units Selection/UnitSelections.cs	(date 1691980384156)
@@ -1,66 +1,66 @@
-using System.Collections;
 using System.Collections.Generic;
-using Unity.VisualScripting;
 using UnityEngine;
 
-public class UnitSelections : MonoBehaviour
-{
-    public List<Unit> unitlist = new List<Unit>();
-    public List<Unit> unitSelectedList = new List<Unit>();
+namespace Units_Selection
+{
+    public class UnitSelections : MonoBehaviour
+    {
+        public List<Unit> unitList = new();
+        public List<Unit> unitSelectedList = new();
 
-    private static UnitSelections _instance;
-    public static UnitSelections Instance { get { return _instance; } }
+        public static UnitSelections Instance { get; private set; }
 
-    private void Awake()
-    {
-        //if an instance of this already exists and it isn’t this one
-        if (_instance != null && _instance != this)
-        {
-            // we destroy this instance
-            Destroy(this.gameObject);
-        }
-        else
-        {
-            //make this the instance
-            _instance = this;
-        }
-    }
+        private void Awake()
+        {
+            //if an instance of this already exists and it isn’t this one
+            if (Instance != null && Instance != this)
+            {
+                // we destroy this instance
+                Destroy(gameObject);
+            }
+            else
+            {
+                //make this the instance
+                Instance = this;
+            }
+        }
 
-    public void ClickSelect(Unit unitToAdd) 
-    {
-        DeselectAll();
-        unitSelectedList.Add(unitToAdd);
-        unitToAdd.isSelected = true;
-    }
+        public void ClickSelect(Unit unitToAdd) 
+        {
+            DeselectAll();
+            unitSelectedList.Add(unitToAdd);
+            unitToAdd.isSelected = true;
+        }
 
-    public void ShiftClickSelect(Unit unitToAdd)
-    {
-        if(!unitSelectedList.Contains(unitToAdd))
-        {
-            unitSelectedList.Add(unitToAdd);
-            unitToAdd.isSelected= true;
-        }
-        else
-        { 
-            unitToAdd.isSelected= false;
-            unitSelectedList.Remove(unitToAdd);
-        }
-    }
+        public void ShiftClickSelect(Unit unitToAdd)
+        {
+            if(!unitSelectedList.Contains(unitToAdd))
+            {
+                unitSelectedList.Add(unitToAdd);
+                unitToAdd.isSelected= true;
+            }
+            else
+            { 
+                unitToAdd.isSelected= false;
+                unitSelectedList.Remove(unitToAdd);
+            }
+        }
 
-    public void DragSelect(List<Unit> units)
-    {
-        unitSelectedList.Clear();
-        unitSelectedList = units;
-        unitSelectedList.ForEach(unit => { unit.isSelected = true; });
-    }
+        public void DragSelect(List<Unit> units)
+        {
+            unitSelectedList.Clear();
+            unitSelectedList = units;
+            unitSelectedList.ForEach(unit => { unit.isSelected = true; });
+        }
 
-    public void DeselectAll()
-    {
-        foreach (var unit in unitSelectedList)
-        {
-            unit.transform.GetChild(0).gameObject.SetActive(false);
-            unit.isSelected = false;
-        }
-        unitSelectedList.Clear();
+        public void DeselectAll()
+        {
+            foreach (var unit in unitSelectedList)
+            {
+                unit.transform.GetChild(0).gameObject.SetActive(false);
+                unit.isSelected = false;
+            }
+            unitSelectedList.Clear();
+        }
     }
 }
Index: Assets/Scripts/Units Selection/JobsExtensions.cs.meta
===================================================================
diff --git a/Assets/Scripts/Units Selection/JobsExtensions.cs.meta b/Assets/Scripts/Units Selection/JobsExtensions.cs.meta
deleted file mode 100644
--- a/Assets/Scripts/Units Selection/JobsExtensions.cs.meta	(revision ab738df56da18496c823a60dfc12d33bb6733964)
+++ /dev/null	(revision ab738df56da18496c823a60dfc12d33bb6733964)
@@ -1,11 +0,0 @@
-fileFormatVersion: 2
-guid: 83c44e52465586849bda315aae2cf4ae
-MonoImporter:
-  externalObjects: {}
-  serializedVersion: 2
-  defaultReferences: []
-  executionOrder: 0
-  icon: {instanceID: 0}
-  userData: 
-  assetBundleName: 
-  assetBundleVariant: 
Index: Assets/Scripts/Units Selection/JobsExtensions.cs
===================================================================
diff --git a/Assets/Scripts/Units Selection/JobsExtensions.cs b/Assets/Scripts/Units Selection/JobsExtensions.cs
deleted file mode 100644
--- a/Assets/Scripts/Units Selection/JobsExtensions.cs	(revision ab738df56da18496c823a60dfc12d33bb6733964)
+++ /dev/null	(revision ab738df56da18496c823a60dfc12d33bb6733964)
@@ -1,66 +0,0 @@
-using Unity.Mathematics;
-
-public class JobsExtensions
-{
-    /// <summary>
-    /// Convert point from world space to screen space
-    /// </summary>
-    /// <param name="point">Point in World Space</param>
-    /// <param name="cameraPos">Camera position in World Space</param>
-    /// <param name="camProjMatrix">Camera.projectionMatrix</param>
-    /// <param name="camUp">Camera.transform.up</param>
-    /// <param name="camRight">Camera.transform.right</param>
-    /// <param name="camForward">Camera.transform.forward</param>
-    /// <param name="pixelWidth">Camera.pixelWidth</param>
-    /// <param name="pixelHeight">Camera.pixelHeight</param>
-    /// <param name="scaleFactor">Canvas.scaleFactor</param>
-    /// <returns></returns>
-    public static float2 ConvertWorldToScreenCoordinates(float3 point, float3 cameraPos, float4x4 camProjMatrix, float3 camUp, float3 camRight, float3 camForward, float pixelWidth, float pixelHeight, float scaleFactor)
-    {
-        /*
-        * 1 convert P_world to P_camera
-        */
-        float4 pointInCameraCoodinates = ConvertWorldToCameraCoordinates(point, cameraPos, camUp, camRight, camForward);
-
-
-        /*
-        * 2 convert P_camera to P_clipped
-        */
-        float4 pointInClipCoordinates = math.mul(camProjMatrix, pointInCameraCoodinates);
-
-        /*
-        * 3 convert P_clipped to P_ndc
-        * Normalized Device Coordinates
-        */
-        float4 pointInNdc = pointInClipCoordinates / pointInClipCoordinates.w;
-
-
-        /*
-        * 4 convert P_ndc to P_screen
-        */
-        float2 pointInScreenCoordinates;
-        pointInScreenCoordinates.x = pixelWidth / 2.0f * (pointInNdc.x + 1);
-        pointInScreenCoordinates.y = pixelHeight / 2.0f * (pointInNdc.y + 1);
-
-
-        // return screencoordinates with canvas scale factor (if canvas coords required)
-        return pointInScreenCoordinates / scaleFactor;
-    }
-
-    private static float4 ConvertWorldToCameraCoordinates(float3 point, float3 cameraPos, float3 camUp, float3 camRight, float3 camForward)
-    {
-        // translate the point by the negative camera-offset
-        //and convert to Vector4
-        float4 translatedPoint = new float4(point - cameraPos, 1f);
-
-        // create transformation matrix
-        float4x4 transformationMatrix = float4x4.identity;
-        transformationMatrix.c0 = new float4(camRight.x, camUp.x, -camForward.x, 0);
-        transformationMatrix.c1 = new float4(camRight.y, camUp.y, -camForward.y, 0);
-        transformationMatrix.c2 = new float4(camRight.z, camUp.z, -camForward.z, 0);
-
-        float4 transformedPoint = math.mul(transformationMatrix, translatedPoint);
-
-        return transformedPoint;
-    }
-}
Index: .idea/.idea.RTS-game/.idea/indexLayout.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/.idea.RTS-game/.idea/indexLayout.xml b/.idea/.idea.RTS-game/.idea/indexLayout.xml
new file mode 100644
--- /dev/null	(date 1691979439902)
+++ b/.idea/.idea.RTS-game/.idea/indexLayout.xml	(date 1691979439902)
@@ -0,0 +1,12 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="UserContentModel">
+    <attachedFolders>
+      <Path>Assets/Scripts</Path>
+    </attachedFolders>
+    <explicitIncludes />
+    <explicitExcludes>
+      <Path>Assets/Scripts/Pathfinding.cs.meta</Path>
+    </explicitExcludes>
+  </component>
+</project>
\ No newline at end of file
Index: .idea/.idea.RTS-game/.idea/projectSettingsUpdater.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/.idea.RTS-game/.idea/projectSettingsUpdater.xml b/.idea/.idea.RTS-game/.idea/projectSettingsUpdater.xml
new file mode 100644
--- /dev/null	(date 1691980404246)
+++ b/.idea/.idea.RTS-game/.idea/projectSettingsUpdater.xml	(date 1691980404246)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="RiderProjectSettingsUpdater">
+    <option name="vcsConfiguration" value="2" />
+  </component>
+</project>
\ No newline at end of file
Index: .idea/.idea.RTS-game/.idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/.idea.RTS-game/.idea/vcs.xml b/.idea/.idea.RTS-game/.idea/vcs.xml
new file mode 100644
--- /dev/null	(date 1691980404240)
+++ b/.idea/.idea.RTS-game/.idea/vcs.xml	(date 1691980404240)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="" vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
